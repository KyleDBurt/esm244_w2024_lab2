---
title: "ESM 244 Lab 2"
author: "Kyle Burt"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(tsibble)
library(feasts)
library(fable)
```

# Part 1: Time series with Toolik Lake data

## Always look at data

### Read in the data

```{r}
toolik_df <- read_csv(here('data/toolik_daily.csv'))

### Convert data frame to time series

toolik_ts <- toolik_df |>
  mutate(date = lubridate::mdy(date)) |>
  as_tsibble(key = NULL,
             index = date)

ggplot(toolik_ts, aes(x = date, y = daily_air_temp)) +
  geom_line() +
  labs(x = "Date", y = "Mean daily air temp (Celcius)/n at Toolik Station")
```

## Use filter_index() function to filter by date/time

```{r}
### Filter from December 2010 to January 2011
toolik_ts |>
  filter_index("2018-01-01" ~ .)
```

## Use index_by() to aggregate time series by increments

```{r}
toolik_month <- toolik_ts |>
  index_by(yr_mo = ~yearmonth(.)) |>
  summarize(monthly_mean_temp = mean(daily_air_temp, na.rm = TRUE)) |>
  ungroup()
```

# Plot

```{r}
ggplot(data = toolik_month, aes(x = yr_mo, y = monthly_mean_temp)) +
  geom_line()

ggplot(toolik_month, aes(x = year(yr_mo), y = monthly_mean_temp)) +
  geom_line() +
  facet_wrap(~month(yr_mo, label = TRUE)) +
  labs(x = "Year", y = "Annual mean air temp (Celsius)",
       title = "Toolik Station mean annual air temperature",
       subtitle = "1988-2023",
       caption = "<put citation here>")

# Split plots into separate code chunks in assignments
```

# Part 2: Time series wrangling and forecasting

## Energy usage by sector in trillions of BTUs

```{r}
energy_df <- read_csv(here("data", "energy.csv"))
```

### Analysis goals:

-   Examine patterns and trends in residential energy consumption over time
-   Predict what residential energy use patterns will look like over the next 5 years

### Pseudocode:

-   Change yrmonth from a character to a date

-   Convert to time series (as_tsibble)

-   Develop an exploratory ggplot for trends (seasonality, etc)

-   Average the energy consumption by year (look year-to-year)

-   Filter the dataset to look at residential

-   Forecasting once we look at trends

-   Identify trend, seasonality before forecasting

-   Convert to time series (as_tsibble)

-   Define alpha value (from exponential smoothing) and select a suitable model

-   Decompose the data to look for trends and seasonality

Setup

```{r}
energy_ts <- energy_df |>
  mutate(date = tsibble::yearmonth(yrmonth)) |>
  as_tsibble(key = sector,
             index = date)
```

Plot

```{r}
ggplot(energy_ts, aes(x = date, y = energy_total, color = sector)) +
  geom_line() +
  labs(x = "Date", y = "Energy usage by sector \n (trillions of BTUs)") +
  facet_wrap(~sector, ncol =1)
```

## Patterns

-   Residential looks similar to commercial, with an upward trend at least for the first part (maybe leveling off or decreasing in recent years)
-   Seasonality (summer and winter peaks, summer peaks getting larger over time)

### Season plot

```{r}
energy_ts |>
  filter(sector == "residential") |>
  gg_season(y = energy_total, pal = hcl.colors(n = 9)) +
  theme_light() +
  labs(x = "Month", y = "Residential energy consumption (trillion BTU)")
```

### Subseries plot

```{r}
energy_ts |>
  gg_subseries(y = energy_total)
```

### Decomposition

```{r}
### find STL decomposition (L = LOESS/Locally estimated scatterplot smoothing)

dcmp <- energy_ts |>
  filter(sector == "residential") |>
  model(feasts::STL(energy_total ~ season(period = "1 year") +
                      trend(window = 49)))

components(dcmp) |>
  autoplot()
```

### Autocorrelation function

```{r}
energy_ts |>
  filter(sector == "residential") |>
  ACF(energy_total) |>
  autoplot()
```

## Forecasting by Holt Winters exponential smoothing

Specify method for each component, whether none ("N), additive ("A"), or multiplicative ("M")

```{r}
### Create a model
energy_fit <- energy_ts |>
  filter(sector == "residential") |>
filter_index("2010-11" ~ .) |>
  model(ets = ETS(energy_total ~ season(method = "M") + trend(method = "A")))

energy_forecast <- energy_fit |>
  forecast(h = "5 years")

energy_forecast |>
  autoplot(energy_ts)
```

```{r}
energy_predicted <- energy_fit |>
  broom::augment()

ggplot(energy_predicted)+
  geom_line(aes(x = date, y = energy_total)) +
  geom_line(aes(x = date, y = .fitted), color = "red", alpha = 0.7)

ggplot(energy_predicted, aes(x = .resid)) +
  geom_histogram()
```
